import streamlit as st
import requests

from streamlit_ui.constants import URL, HEADER_SESSION_ID


def initialize_session_id() -> str:
    """
    Initializes or restores a session ID.

    This function checks for a session ID in the following order:
    1. URL query parameters (`session_id`).
    2. Streamlit's session state (`st.session_state`).

    If a session ID is found in the URL, it's validated with the backend.
    If valid, it's stored in the session state. If invalid, an error is shown.

    If no session ID is in the URL but one exists in the session state, it's used.

    If no session ID is found in either, a new one is generated by the backend,
    stored in the session state, and added to the URL query parameters.

    Returns
    -------
    str
        The active session ID.
    """
    # Try to get session ID from query parameters
    session_id_param = st.query_params.get("session_id")

    # If session ID is in query params but not in session state, validate it
    if session_id_param and "session_id" not in st.session_state:
        with st.spinner("Validating session ID..."):
            response = requests.post(
                f"{URL}/validate-session-id",
                headers={HEADER_SESSION_ID: session_id_param},
            )
            if response.ok:
                st.session_state["session_id"] = session_id_param
                return session_id_param
            else:
                st.error("Database does not exist or session ID is invalid.")
                st.button(
                    "Generate new session ID",
                    on_click=lambda: st.query_params.pop("session_id"),
                    use_container_width=True,
                )
                st.stop()

    # If session ID is not in session state, generate a new one
    elif "session_id" not in st.session_state:
        response = requests.get(f"{URL}/session-id")
        if response.ok:
            session_id = response.json()
            st.session_state["session_id"] = session_id
            st.query_params["session_id"] = session_id
            return session_id
        else:
            st.error("Session ID generation failed.")
            st.stop()

    # If session ID is already in session state, use it
    else:
        session_id = st.session_state.get("session_id")
        st.query_params["session_id"] = session_id
        return session_id
